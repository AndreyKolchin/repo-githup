


Чтобы посмотреть все установленные настройки и узнать где именно они заданы, используйте команду:

$ git config --list --show-origin

Первое, что вам следует сделать после установки Git — указать ваше имя и адрес электронной почты. Это важно, потому что каждый коммит в Git содержит эту информацию, и она включена в коммиты, передаваемые вами, и не может быть далее изменена:

$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

Если вы хотите проверить используемую конфигурацию, можете использовать команду git config --list, чтобы показать все настройки, которые Git найдёт:

$ git config user.name

После создания папки на локальном компьютере и войдя в нее через терминал, нужно выполнить команду git init -- она создает пустой репозитрий.
Что бы его увидеть нужно воспользоваться коммандой ls в расширенном режиме. Тоесть ls -a  . 

git status воводит инфу про ветку и т.д.

Что бы синхронизировать и заставить репозиторий работать необходимо ввести команду git remote add origin и далее ссылка на источник.

После необходимо убедится, что все работает команда git remote -v она покажет список подключенных соендинений.

Видео № 4 Синхранизация локального репозитария с удаленным сервером.

git remote add origin и далее ссылка на источник
git remote -v -- проверяем что подключение прошло успешно. Данная комманда показывает список подключенных соендинений.
___________________________________________________________________________
Видео № 5

git commit -am  -- упрощенное запись в коммит'update readme.md' 
1. git status -- текущий статус
2. git add <file> добавить файл к будующему коммиту.
3. git commit -- записать коммит.
4. git commit -m 'commit messange' - запись коммита с сообщением.(Она используется если не открывать редактор а сразу записать сообщение.)
5. git commit -am '' срозу добавляет коммит а в ковычках указывается сообщение. Это самый простой способ закоминтить все.

echo "config" > .gitignore -- echo записывает слово config в фаил gitignore
mkdir -- Создает директорию папку. Что бы удалить дерикторию rm -R
touch -- создает файл в директории.
git add и название файла. для добавления файла в индекс репазитория.

_____________________________________________________________

В гите специально придумано 2 системных файла.
.gitkeep -- служит для того что бы сохранять пустые директории в общем репозитории.

.gitignore -- служит для того что бы некоторые файлы не попадали в общий список репозитоия.

______________________________________________________________________
Видео № 6 История репозиториев.
git log -- выдает инфу о каждом коммите который был создан в репозитории. 
git log --oneline  - выводит туже самою историю, но более компактно.
git reset (указываем хеш коммита) -- отменяет коммит.
git reflog -- Выводит более подробные сведения о том, что происходит в нашем репозитории. (пишет не только об истории коммитов, но и обо всех операциях которые были совершены).
git reset хеш коммита ( можно ипользовать для восстановления удаленного коммита. Для этого нужно указать хеш коммита который удалил.)
git revert   -- отменить последствия того или иного коммита. Отлчие от reset в том что она не сбрасывает действия коммита, а создает новый коммит который отменяет действие совершенное в предыдущем.
_______________________________________________________________________
Урок № 7  Работа с ветками репозитария.

В большинстве репозитореев master является основной веткой репозитория.
git branch -- показывает какие ветки созданы. 
git branch dev - создать новую ветку/ в данном примере создается ветка dev
git checkout и название ветки -- переключиться на ветку.
git branch имя папки dev-maste master - если нужно из мастера создать ветку, когда находишься на другой ветке.
git checkout -b dev-test  -- создание новой ветки в момент переключения. Данная команда выполнит переключение в папку  dev-test и если такой нет, то сосдаст ее -b. 







